# скопировано из products_service/app/products_pb2_grpc.py
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import products_pb2 as products__pb2



class ProductsStub(object):
	"""Missing associated documentation comment in .proto file."""

	def __init__(self, channel):
		"""Constructor.

		Args:
			channel: A grpc.Channel.
		"""
		self.GetProduct = channel.unary_unary(
				'/products.Products/GetProduct',
				request_serializer=products__pb2.ProductRequest.SerializeToString,
				response_deserializer=products__pb2.ProductReply.FromString,
				_registered_method=True)
		self.ListProducts = channel.unary_unary(
				'/products.Products/ListProducts',
				request_serializer=products__pb2.ListProductsRequest.SerializeToString,
				response_deserializer=products__pb2.ListProductsReply.FromString,
				_registered_method=True)


class ProductsServicer(object):
	"""Missing associated documentation comment in .proto file."""

	def GetProduct(self, request, context):
		"""Missing associated documentation comment in .proto file."""
		context.set_code(grpc.StatusCode.UNIMPLEMENTED)
		context.set_details('Method not implemented!')
		raise NotImplementedError('Method not implemented!')

	def ListProducts(self, request, context):
		"""Missing associated documentation comment in .proto file."""
		context.set_code(grpc.StatusCode.UNIMPLEMENTED)
		context.set_details('Method not implemented!')
		raise NotImplementedError('Method not implemented!')


def add_ProductsServicer_to_server(servicer, server):
	rpc_method_handlers = {
			'GetProduct': grpc.unary_unary_rpc_method_handler(
					servicer.GetProduct,
					request_deserializer=products__pb2.ProductRequest.FromString,
					response_serializer=products__pb2.ProductReply.SerializeToString,
			),
			'ListProducts': grpc.unary_unary_rpc_method_handler(
					servicer.ListProducts,
					request_deserializer=products__pb2.ListProductsRequest.FromString,
					response_serializer=products__pb2.ListProductsReply.SerializeToString,
			),
	}
	generic_handler = grpc.method_handlers_generic_handler(
			'products.Products', rpc_method_handlers)
	server.add_generic_rpc_handlers((generic_handler,))
	server.add_registered_method_handlers('products.Products', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Products(object):
	"""Missing associated documentation comment in .proto file."""

	@staticmethod
	def GetProduct(request,
			target,
			options=(),
			channel_credentials=None,
			call_credentials=None,
			insecure=False,
			compression=None,
			wait_for_ready=None,
			timeout=None,
			metadata=None):
		return grpc.experimental.unary_unary(
			request,
			target,
			'/products.Products/GetProduct',
			products__pb2.ProductRequest.SerializeToString,
			products__pb2.ProductReply.FromString,
			options,
			channel_credentials,
			insecure,
			call_credentials,
			compression,
			wait_for_ready,
			timeout,
			metadata,
			_registered_method=True)

	@staticmethod
	def ListProducts(request,
			target,
			options=(),
			channel_credentials=None,
			call_credentials=None,
			insecure=False,
			compression=None,
			wait_for_ready=None,
			timeout=None,
			metadata=None):
		return grpc.experimental.unary_unary(
			request,
			target,
			'/products.Products/ListProducts',
			products__pb2.ListProductsRequest.SerializeToString,
			products__pb2.ListProductsReply.FromString,
			options,
			channel_credentials,
			insecure,
			call_credentials,
			compression,
			wait_for_ready,
			timeout,
			metadata,
			_registered_method=True)
# скопировано из products_service/app/products_pb2_grpc.py
